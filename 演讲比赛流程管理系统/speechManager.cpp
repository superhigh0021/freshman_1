#include"speechManager.h"

SpeechManager::SpeechManager() {
	this->initSpeech();
	this->createSpeaker();
	//加载往届记录
	this->loadRecord();
}

void SpeechManager::show_Menu() {
	cout << "********************************************" << endl;
	cout << "*************  欢迎参加演讲比赛 ************" << endl;
	cout << "*************  1.开始演讲比赛  *************" << endl;
	cout << "*************  2.查看往届记录  *************" << endl;
	cout << "*************  3.清空比赛记录  *************" << endl;
	cout << "*************  0.退出比赛程序  *************" << endl;
	cout << "********************************************" << endl;
	cout << endl;
}

void SpeechManager::exitSystem() {
	cout<<"欢迎下次使用！"<<endl;
	system("pause");
	exit(0);
}

void SpeechManager::initSpeech() {
	//容器都置空
	this->v1.clear();
	this->v2.clear();
	this->vVictory.clear();
	this->m_Speaker.clear();

	//初始化比赛轮数
	this->m_Index=1;

	//将记录的容器也清空
	this->m_Record.clear();
}

void SpeechManager::createSpeaker() {
	string nameSeed="ABCDEFGHIJKL";
	for(int i=0; i<nameSeed.size(); ++i) {
		string name="选手";
		name+=nameSeed[i];

		//创建具体选手
		Speaker sp;
		sp.m_Name=name;

		for(auto &j:sp.m_Score)
			j=0;

		//创建选手编号  并且放入到v1容器中
		this->v1.push_back(i+10001);

		//选手的编号以及对应选手，放入map容器
		this->m_Speaker.insert(make_pair(i+10001, sp));
	}
}

void SpeechManager::startSpeech() {
//第一轮比赛
	//1、抽签
	this->speechDraw();

	//2、比赛
	this->speechContest();

	//3、晋级结果显示
	this->showScore();

//第二轮比赛
	++this->m_Index;

	//1、抽签
	this->speechDraw();

	//2、比赛
	this->speechContest();

	//3、晋级结果显示
	this->showScore();

	//4、保存分数到文件中
	this->saveRecord();

	//重置比赛
	this->initSpeech();
	this->createSpeaker();
	this->loadRecord();

	cout<<"本届比赛完毕"<<endl;
	system("pause");
	system("cls");
}

//抽签
void SpeechManager::speechDraw() {
	cout<<"第"<<this->m_Index<<"轮选手正在抽签"<<endl;
	cout<<"------------------------"<<endl;
	cout<<"抽签后演讲顺序如下："<<endl;

	if(this->m_Index==1) {
		random_shuffle(v1.begin(),v1.end());
		for(auto i:v1)
			cout<<i<<' ';
		cout<<endl;
	} else {
		random_shuffle(v2.begin(),v2.end());
		for(auto i:v2)
			cout<<i<<' ';
		cout<<endl;
	}
	cout<<"------------------------"<<endl;
	system("pause");
	cout<<endl;
}

//比赛
void SpeechManager::speechContest() {
	cout<<"第"<<this->m_Index<<"轮比赛正式开始"<<endl;

	//准备一个临时容器  存放小组成绩
	multimap<double,int,greater<double>>groupScore;
	int num=0;  //记录人员个数  6人一组

	vector<int>v_Src;   //比赛选手的容器
	if(this->m_Index==1) {
		v_Src=v1;
	} else {
		v_Src=v2;
	}
	//遍历所有选手进行比赛
	for(auto it:v_Src) {
		++num;
		//评委打分
		deque<double>d;
		for(int i=0; i<10; ++i) {
			double score=(rand()%401+600)/10.f;
			//cout<<std::left<<setw(4)<<score<<' ';
			d.push_back(score);
		}
		sort(d.begin(),d.end(),greater<double>());  //降序排列
		d.pop_back();
		d.pop_front();   //去除最高分和最低分
		double sum=accumulate(d.begin(),d.end(),0.0f);
		double avg=sum/(double)d.size();

		//将平均分放入到map容器中
		this->m_Speaker[it].m_Score[this->m_Index-1] = avg;

		//将打分数据  放入临时小组容器中
		groupScore.insert(make_pair(avg,it));   //key是得分，value是具体编号
		//每六人取出前三名
		if(num%6 == 0) {
			cout<<"第"<<num/6<<"小组比赛名次："<<endl;
			for(auto i:groupScore) {
				cout<<"编号："<<i.second<<' '<<"姓名："<<this->m_Speaker[i.second].m_Name
				    <<' '<<"成绩："<<this->m_Speaker[i.second].m_Score[this->m_Index-1];
				cout<<endl;
			}

			//取走前三名
			int cnt=0;    //计数器
			for(auto j:groupScore) {
				if(this->m_Index==1) {
					v2.push_back(j.second);
				} else {
					vVictory.push_back(j.second);
				}
				if(++cnt==3)
					break;
			}

			groupScore.clear();     //小组容器清空
		}
	}

	cout<<"第"<<this->m_Index<<"轮比赛完毕"<<endl;
	system("pause");
}

//显示比赛结果
void SpeechManager::showScore() {
	cout<<"第"<<this->m_Index<<"轮晋级选手信息如下："<<endl;

	vector<int>v;
	if(this->m_Index==1)
		v=v2;
	else
		v=vVictory;
	for(auto it:v) {
		cout<<"选手编号："<<it<<"姓名："<<this->m_Speaker[it].m_Name
		    <<"得分："<<this->m_Speaker[it].m_Score[this->m_Index-1]<<endl;
	}
	cout<<endl;

	system("pause");
	system("cls");
}

//保存记录
void SpeechManager::saveRecord() {
	ofstream ofs;
	ofs.open("speech.csv",ios::out | ios::app);  //用追加的方式写文件

	//将每个人的数据 写入到文件中
	for(auto it : vVictory) {
		ofs<<it<<","<<this->m_Speaker[it].m_Score[1]<<",";
	}
	ofs<<endl;

	ofs.close();
	cout<<"记录已保存"<<endl;

	this->fileIsEmpty=false;
}

//读取记录
void SpeechManager::loadRecord() {
	ifstream ifs;
	ifs.open("speech.csv",ios::in);

	if(!ifs.is_open()) {
		this->fileIsEmpty=true;
		ifs.close();
		return;
	}

	//文件清空情况
	char ch;
	ifs>>ch;
	if(ifs.eof()) {
		this->fileIsEmpty=true;
		ifs.close();
		return;
	}

	//文件不为空
	this->fileIsEmpty=false;
	ifs.putback(ch);   //将上面读取的单个字符  放回来
	string data;
	int index=0;
	while(ifs>>data) {

		vector<string>v;   //存放

		int pos=-1;    //查到“，”的位置
		int start=0;
		while(true) {
			pos=data.find(",",start);
			if(pos==-1) {
				break;
			}
			string temp=data.substr(start,pos-start);
			v.push_back(temp);
			start=pos+1;
		}
		this->m_Record.insert(make_pair(index,v));
		++index;
	}
	ifs.close();
}

//往届记录
void SpeechManager::showRecord() {
	if(this->fileIsEmpty) {
		cout<<"文件为空或文件不存在！"<<endl;
	} else {
		for(auto i=0; i<this->m_Record.size(); ++i) {
			cout<<"第"<<i+1<<"届"
			    <<"冠军编号："<<this->m_Record[i][0]<<"得分"<<this->m_Record[i][1]<<' '
			    <<"亚军编号："<<this->m_Record[i][2]<<"得分"<<this->m_Record[i][3]<<' '
			    <<"季军编号："<<this->m_Record[i][4]<<"得分"<<this->m_Record[i][5]<<' '<<endl;
		}
	}
	system("pause");
	system("cls");
}

//清空记录
void SpeechManager::clearRecord() {
	ofstream ofs;
	ofs.open("speech.csv",ios::trunc);
	ofs.close();
	this->initSpeech();
	this->createSpeaker();
	this->loadRecord();
	cout<<"清空成功"<<endl;

	system("pause");
	system("cls");
}

SpeechManager::~SpeechManager() {}
